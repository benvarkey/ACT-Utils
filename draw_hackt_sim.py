"""
This script will load in a .dot file and a .log file
generated by hacdump.sh and visualize the state-transition
"""
def __draw_state_nodes__(dot_file):
    """
    Read in a .dot file, draw the nodes and return their positions
    """
    import networkx as nx
    import pygraphviz as pyg
    from matplotlib.pyplot import gca, draw, gcf

    _ylabel_offset_ = -40
    gpy = pyg.AGraph(dot_file)
    gpy.layout(prog='neato', args='-Goverlap=prism -Gsep=1')
    pos = dict()
    pos_labels = dict()
    for nod in gpy.nodes_iter():
        _pos = nod.attr[u'pos'].split(',')
        _name = nod.name
        _pos = map(float, _pos)
        _pos_label = map(float, _pos)
        _pos_label[1] += _ylabel_offset_
        pos[str(_name)] = tuple(_pos)
        pos_labels[str(_name)] = tuple(_pos_label)

    gnx = nx.read_dot(dot_file)
    node_labels = {str(n[0]):str(n[1]['label'])
                   for n in gnx.node.items()}
    nx.draw_networkx(gnx, pos=pos, with_labels=False,
                     node_color='w', node_size=200)
    nx.draw_networkx_labels(gnx, labels=node_labels, pos=pos_labels)

    current_ax = gca()
    current_ax.spines['top'].set_visible(False)
    current_ax.spines['right'].set_visible(False)
    current_ax.spines['bottom'].set_visible(False)
    current_ax.spines['left'].set_visible(False)
    current_ax.xaxis.set_ticks([])
    current_ax.yaxis.set_ticks([])
    gcf().set_tight_layout(True)
    draw()
    return pos

def __read_sim_log__(log_file):
    """
    Read in a .log file, return sate-transition table
    """
    import numpy as np
    tran_dt = np.dtype([('e_idx', np.uint), ('e_t', np.uint), 
                        ('e_n', np.uint), ('c_idx', np.uint)])
    tran_list = np.loadtxt(log_file, dtype=tran_dt, skiprows=2)
    return tran_list

def __generate_tran_nodes__(pos):
    """
    Generate a list of patches to match the node positions.
    """
    from matplotlib.patches import Circle
    _pr_ = 25
    node_patches = dict()
    node_text = dict()
    num_nodes = len(pos)
    for node_idx in range(num_nodes):
        evt_idx = "EVENT_" + str(node_idx)
        node_pos = pos[evt_idx]
        node_patches[node_idx] = Circle(xy=node_pos, radius=_pr_,
                                        color='g', alpha=0.3)
        node_text[node_idx] = Text(x=node_pos[0]-5, y=node_pos[1]-7,
                                   text='-1')
    return node_patches, node_text

def __draw_state_transition__(tran_list, node_patches, node_text, cur_ax, time_mult=0.1):
    """
    Draw the state transition
    """
    import time
    from numpy import zeros
    from matplotlib.pyplot import draw
    _alpha_decay_ = 0.075

    num_tran = tran_list.shape[0]
    evt_t_list = tran_list['e_t']
    evt_s_list = tran_list['e_n']
    t_last = 0
    evt_mask = zeros(len(node_patches), dtype=int)
    patch_list = node_patches.values()
    last_time = 0
    for idx in range(num_tran):
        evt_t = evt_t_list[idx]
        if last_time < evt_t:
            for pat in patch_list:
                _alpha = pat.get_alpha()
                if _alpha > (0.1 + _alpha_decay_):
                    pat.set_alpha(_alpha - _alpha_decay_)

        last_time = evt_t
        evt_s = evt_s_list[idx]
        current_iter = evt_mask[evt_s]
        t_delta = evt_t - t_last
        t_last = evt_t
        time.sleep(t_delta * time_mult)
        current_patch = node_patches[evt_s]
        current_patch.set_alpha(1.0)
        current_node_text = node_text[evt_s]
        current_node_text.set_text(current_iter)
        if current_patch.get_axes() is None:
            cur_ax.add_patch(current_patch)
            cur_ax.add_artist(current_node_text)
        draw()
        current_iter += 1
        evt_mask[evt_s] = current_iter

def ShowStateTransition(dot_file, log_file):
    """
    Take a dot file and log file and animate the state transition
    """
    from matplotlib.pyplot import gca, figure
    time_mult = 0.1
    figure(figsize=(9, 9))
    pos = __draw_state_nodes__(dot_file)
    tran_list = __read_sim_log__(log_file)
    node_patches, node_text = __generate_tran_nodes__(pos)
    current_ax = gca()
    __draw_state_transition__(tran_list, node_patches, node_text, current_ax, time_mult)
